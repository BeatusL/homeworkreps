// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2024 23:28:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          b4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module b4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [23:0] D;
reg sclr;
// wires                                               
wire result;

// assign statements (if any)                          
b4 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.D(D),
	.result(result),
	.sclr(sclr)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// D[ 23 ]
initial
begin
	D[23] = 1'b1;
	D[23] = #680000 1'b0;
end 
// D[ 22 ]
initial
begin
	D[22] = 1'b1;
	D[22] = #680000 1'b0;
end 
// D[ 21 ]
initial
begin
	D[21] = 1'b1;
	D[21] = #680000 1'b0;
end 
// D[ 20 ]
initial
begin
	D[20] = 1'b1;
	D[20] = #680000 1'b0;
end 
// D[ 19 ]
initial
begin
	D[19] = 1'b1;
	D[19] = #680000 1'b0;
end 
// D[ 18 ]
initial
begin
	D[18] = 1'b1;
	D[18] = #680000 1'b0;
end 
// D[ 17 ]
initial
begin
	D[17] = 1'b1;
	D[17] = #680000 1'b0;
end 
// D[ 16 ]
initial
begin
	D[16] = 1'b1;
	D[16] = #680000 1'b0;
end 
// D[ 15 ]
initial
begin
	D[15] = 1'b1;
	D[15] = #680000 1'b0;
end 
// D[ 14 ]
initial
begin
	D[14] = 1'b1;
	D[14] = #680000 1'b0;
end 
// D[ 13 ]
initial
begin
	D[13] = 1'b1;
	D[13] = #680000 1'b0;
end 
// D[ 12 ]
initial
begin
	D[12] = 1'b1;
	D[12] = #680000 1'b0;
end 
// D[ 11 ]
initial
begin
	D[11] = 1'b1;
	D[11] = #680000 1'b0;
end 
// D[ 10 ]
initial
begin
	D[10] = 1'b1;
	D[10] = #680000 1'b0;
end 
// D[ 9 ]
initial
begin
	D[9] = 1'b1;
	D[9] = #680000 1'b0;
end 
// D[ 8 ]
initial
begin
	D[8] = 1'b1;
	D[8] = #680000 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b1;
	D[7] = #680000 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b1;
	D[6] = #680000 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b1;
	D[5] = #680000 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b1;
	D[4] = #680000 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b1;
	D[3] = #680000 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b1;
	D[2] = #680000 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b1;
	D[1] = #680000 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b1;
	D[0] = #680000 1'b0;
end 

// sclr
initial
begin
	sclr = 1'b0;
end 
endmodule

