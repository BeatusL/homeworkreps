// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/20/2024 22:07:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab2_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] a;
reg [1:0] b;
reg [1:0] c;
reg [1:0] d;
// wires                                               
wire [1:0] out;

// assign statements (if any)                          
lab2_1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.out(out)
);
initial 
begin 
#1000000 $stop;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b1;
	a[1] = #100000 1'b0;
	#100000;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	# 100000;
	repeat(2)
	begin
		b[1] = 1'b1;
		b[1] = #200000 1'b0;
		# 200000;
	end
	b[1] = 1'b1;
end 
// b[ 0 ]
always
begin
	b[0] = 1'b1;
	b[0] = #100000 1'b0;
	#100000;
end 
// c[ 1 ]
initial
begin
	repeat(2)
	begin
		c[1] = 1'b1;
		c[1] = #200000 1'b0;
		# 200000;
	end
	c[1] = 1'b1;
end 
// c[ 0 ]
always
begin
	c[0] = 1'b0;
	c[0] = #100000 1'b1;
	#100000;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b1;
	# 100000;
	repeat(2)
	begin
		d[1] = 1'b0;
		d[1] = #200000 1'b1;
		# 200000;
	end
	d[1] = 1'b0;
end 
// d[ 0 ]
always
begin
	d[0] = 1'b1;
	d[0] = #100000 1'b0;
	#100000;
end 
endmodule

