// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"

// DATE "09/20/2024 22:07:06"

// 
// Device: Altera EP4CE6E22C8 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lab2_1 (
	a,
	b,
	c,
	d,
	out);
input 	[1:0] a;
input 	[1:0] b;
input 	[1:0] c;
input 	[1:0] d;
output 	[1:0] out;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \out[0]~output_o ;
wire \out[1]~output_o ;
wire \d[0]~input_o ;
wire \d[1]~input_o ;
wire \c[1]~input_o ;
wire \c[0]~input_o ;
wire \out~0_combout ;
wire \out~1_combout ;
wire \b[0]~input_o ;
wire \b[1]~input_o ;
wire \a[1]~input_o ;
wire \a[0]~input_o ;
wire \out~2_combout ;
wire \out~3_combout ;
wire \out~4_combout ;
wire \out~5_combout ;


cycloneive_io_obuf \out[0]~output (
	.i(\out~4_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[0]~output .bus_hold = "false";
defparam \out[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out[1]~output (
	.i(\out~5_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[1]~output .bus_hold = "false";
defparam \out[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \d[0]~input (
	.i(d[0]),
	.ibar(gnd),
	.o(\d[0]~input_o ));
// synopsys translate_off
defparam \d[0]~input .bus_hold = "false";
defparam \d[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \d[1]~input (
	.i(d[1]),
	.ibar(gnd),
	.o(\d[1]~input_o ));
// synopsys translate_off
defparam \d[1]~input .bus_hold = "false";
defparam \d[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \c[1]~input (
	.i(c[1]),
	.ibar(gnd),
	.o(\c[1]~input_o ));
// synopsys translate_off
defparam \c[1]~input .bus_hold = "false";
defparam \c[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \c[0]~input (
	.i(c[0]),
	.ibar(gnd),
	.o(\c[0]~input_o ));
// synopsys translate_off
defparam \c[0]~input .bus_hold = "false";
defparam \c[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \out~0 (
// Equation(s):
// \out~0_combout  = (\d[0]~input_o  & ((\d[1]~input_o ) # ((\c[0]~input_o ) # (!\c[1]~input_o )))) # (!\d[0]~input_o  & (\c[0]~input_o  & ((\c[1]~input_o ) # (!\d[1]~input_o ))))

	.dataa(\d[0]~input_o ),
	.datab(\d[1]~input_o ),
	.datac(\c[1]~input_o ),
	.datad(\c[0]~input_o ),
	.cin(gnd),
	.combout(\out~0_combout ),
	.cout());
// synopsys translate_off
defparam \out~0 .lut_mask = 16'hFB8A;
defparam \out~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~1 (
// Equation(s):
// \out~1_combout  = (\d[1]~input_o ) # (\c[1]~input_o )

	.dataa(gnd),
	.datab(\d[1]~input_o ),
	.datac(\c[1]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\out~1_combout ),
	.cout());
// synopsys translate_off
defparam \out~1 .lut_mask = 16'hFCFC;
defparam \out~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \b[0]~input (
	.i(b[0]),
	.ibar(gnd),
	.o(\b[0]~input_o ));
// synopsys translate_off
defparam \b[0]~input .bus_hold = "false";
defparam \b[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[1]~input (
	.i(b[1]),
	.ibar(gnd),
	.o(\b[1]~input_o ));
// synopsys translate_off
defparam \b[1]~input .bus_hold = "false";
defparam \b[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \out~2 (
// Equation(s):
// \out~2_combout  = (\b[0]~input_o  & ((\b[1]~input_o ) # ((\a[0]~input_o ) # (!\a[1]~input_o )))) # (!\b[0]~input_o  & (\a[0]~input_o  & ((\a[1]~input_o ) # (!\b[1]~input_o ))))

	.dataa(\b[0]~input_o ),
	.datab(\b[1]~input_o ),
	.datac(\a[1]~input_o ),
	.datad(\a[0]~input_o ),
	.cin(gnd),
	.combout(\out~2_combout ),
	.cout());
// synopsys translate_off
defparam \out~2 .lut_mask = 16'hFB8A;
defparam \out~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~3 (
// Equation(s):
// \out~3_combout  = (\b[1]~input_o ) # (\a[1]~input_o )

	.dataa(gnd),
	.datab(\b[1]~input_o ),
	.datac(\a[1]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\out~3_combout ),
	.cout());
// synopsys translate_off
defparam \out~3 .lut_mask = 16'hFCFC;
defparam \out~3 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~4 (
// Equation(s):
// \out~4_combout  = (\out~0_combout  & ((\out~1_combout ) # ((\out~2_combout ) # (!\out~3_combout )))) # (!\out~0_combout  & (\out~2_combout  & ((\out~3_combout ) # (!\out~1_combout ))))

	.dataa(\out~0_combout ),
	.datab(\out~1_combout ),
	.datac(\out~2_combout ),
	.datad(\out~3_combout ),
	.cin(gnd),
	.combout(\out~4_combout ),
	.cout());
// synopsys translate_off
defparam \out~4 .lut_mask = 16'hF8BA;
defparam \out~4 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \out~5 (
// Equation(s):
// \out~5_combout  = (\d[1]~input_o ) # ((\b[1]~input_o ) # ((\a[1]~input_o ) # (\c[1]~input_o )))

	.dataa(\d[1]~input_o ),
	.datab(\b[1]~input_o ),
	.datac(\a[1]~input_o ),
	.datad(\c[1]~input_o ),
	.cin(gnd),
	.combout(\out~5_combout ),
	.cout());
// synopsys translate_off
defparam \out~5 .lut_mask = 16'hFFFE;
defparam \out~5 .sum_lutc_input = "datac";
// synopsys translate_on

assign out[0] = \out[0]~output_o ;

assign out[1] = \out[1]~output_o ;

endmodule
