// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2024 02:16:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab2_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] top_a;
reg [3:0] top_b;
reg [3:0] top_c;
reg [3:0] top_d;
// wires                                               
wire [3:0] maxres;
wire [3:0] minres;

// assign statements (if any)                          
lab2_2 i1 (
// port map - connection between master ports and signals/registers   
	.maxres(maxres),
	.minres(minres),
	.top_a(top_a),
	.top_b(top_b),
	.top_c(top_c),
	.top_d(top_d)
);
initial 
begin 
#1000000 $finish;
end 
// top_a[ 3 ]
initial
begin
	top_a[3] = 1'b1;
end 
// top_a[ 2 ]
initial
begin
	top_a[2] = 1'b1;
end 
// top_a[ 1 ]
initial
begin
	top_a[1] = 1'b1;
end 
// top_a[ 0 ]
initial
begin
	top_a[0] = 1'b1;
end 
// top_b[ 3 ]
initial
begin
	top_b[3] = 1'b0;
end 
// top_b[ 2 ]
initial
begin
	top_b[2] = 1'b0;
end 
// top_b[ 1 ]
initial
begin
	top_b[1] = 1'b0;
end 
// top_b[ 0 ]
initial
begin
	top_b[0] = 1'b0;
end 
// top_c[ 3 ]
initial
begin
	top_c[3] = 1'b0;
end 
// top_c[ 2 ]
initial
begin
	top_c[2] = 1'b1;
end 
// top_c[ 1 ]
initial
begin
	top_c[1] = 1'b1;
end 
// top_c[ 0 ]
initial
begin
	top_c[0] = 1'b0;
end 
// top_d[ 3 ]
initial
begin
	top_d[3] = 1'b1;
end 
// top_d[ 2 ]
initial
begin
	top_d[2] = 1'b0;
end 
// top_d[ 1 ]
initial
begin
	top_d[1] = 1'b0;
end 
// top_d[ 0 ]
initial
begin
	top_d[0] = 1'b1;
end 
endmodule

