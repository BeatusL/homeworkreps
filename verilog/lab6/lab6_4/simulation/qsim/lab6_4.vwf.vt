// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/19/2024 15:36:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab6_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab6_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] a;
reg [5:0] b;
reg [5:0] c;
reg clk;
reg [5:0] d;
reg rst;
// wires                                               
wire [5:0] max;
wire [5:0] midh;
wire [5:0] midl;
wire [5:0] min;

// assign statements (if any)                          
lab6_4 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clk(clk),
	.d(d),
	.max(max),
	.midh(midh),
	.midl(midl),
	.min(min),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #710000 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b1;
	a[5] = #20000 1'b0;
	a[5] = #40000 1'b1;
	a[5] = #20000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b1;
	a[4] = #20000 1'b0;
	a[4] = #40000 1'b1;
	a[4] = #40000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #60000 1'b1;
	a[3] = #40000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #40000 1'b0;
	a[2] = #40000 1'b1;
	a[2] = #20000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #80000 1'b1;
	a[1] = #20000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
	a[0] = #20000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #20000 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
	b[5] = #40000 1'b1;
	b[5] = #20000 1'b0;
	b[5] = #480000 1'b1;
	b[5] = #80000 1'b0;
	b[5] = #20000 1'b1;
	b[5] = #120000 1'b0;
	b[5] = #80000 1'b1;
	b[5] = #20000 1'b0;
	b[5] = #100000 1'b1;
	b[5] = #20000 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b1;
	b[4] = #60000 1'b0;
	b[4] = #20000 1'b1;
	b[4] = #20000 1'b0;
	b[4] = #400000 1'b1;
	b[4] = #40000 1'b0;
	b[4] = #20000 1'b1;
	b[4] = #40000 1'b0;
	b[4] = #60000 1'b1;
	b[4] = #20000 1'b0;
	b[4] = #40000 1'b1;
	b[4] = #20000 1'b0;
	b[4] = #140000 1'b1;
	b[4] = #20000 1'b0;
	b[4] = #20000 1'b1;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #60000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #400000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #20000 1'b1;
	b[3] = #80000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #20000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #20000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #500000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #20000 1'b0;
	b[2] = #20000 1'b1;
	b[2] = #60000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #100000 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #400000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #20000 1'b0;
	b[1] = #80000 1'b1;
	b[1] = #40000 1'b0;
	b[1] = #180000 1'b1;
	b[1] = #60000 1'b0;
	b[1] = #20000 1'b1;
	b[1] = #40000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #60000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #420000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #60000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #20000 1'b0;
	b[0] = #20000 1'b1;
	b[0] = #100000 1'b0;
end 
// c[ 5 ]
initial
begin
	c[5] = 1'b1;
	c[5] = #40000 1'b0;
	c[5] = #440000 1'b1;
	c[5] = #20000 1'b0;
	c[5] = #20000 1'b1;
	c[5] = #40000 1'b0;
	c[5] = #20000 1'b1;
	c[5] = #20000 1'b0;
	c[5] = #60000 1'b1;
	c[5] = #100000 1'b0;
	c[5] = #20000 1'b1;
	c[5] = #100000 1'b0;
	c[5] = #100000 1'b1;
end 
// c[ 4 ]
initial
begin
	c[4] = 1'b0;
	c[4] = #20000 1'b1;
	c[4] = #40000 1'b0;
	c[4] = #20000 1'b1;
	c[4] = #20000 1'b0;
	c[4] = #400000 1'b1;
	c[4] = #20000 1'b0;
	c[4] = #60000 1'b1;
	c[4] = #40000 1'b0;
	c[4] = #20000 1'b1;
	c[4] = #40000 1'b0;
	c[4] = #100000 1'b1;
	c[4] = #20000 1'b0;
	c[4] = #20000 1'b1;
	c[4] = #60000 1'b0;
	c[4] = #40000 1'b1;
	c[4] = #20000 1'b0;
	c[4] = #40000 1'b1;
end 
// c[ 3 ]
initial
begin
	c[3] = 1'b0;
	c[3] = #40000 1'b1;
	c[3] = #20000 1'b0;
	c[3] = #20000 1'b1;
	c[3] = #20000 1'b0;
	c[3] = #380000 1'b1;
	c[3] = #20000 1'b0;
	c[3] = #20000 1'b1;
	c[3] = #40000 1'b0;
	c[3] = #20000 1'b1;
	c[3] = #20000 1'b0;
	c[3] = #40000 1'b1;
	c[3] = #20000 1'b0;
	c[3] = #20000 1'b1;
	c[3] = #40000 1'b0;
	c[3] = #20000 1'b1;
	c[3] = #40000 1'b0;
	c[3] = #20000 1'b1;
	c[3] = #20000 1'b0;
	c[3] = #40000 1'b1;
	c[3] = #120000 1'b0;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b1;
	c[2] = #40000 1'b0;
	c[2] = #40000 1'b1;
	c[2] = #20000 1'b0;
	c[2] = #420000 1'b1;
	c[2] = #20000 1'b0;
	c[2] = #100000 1'b1;
	c[2] = #40000 1'b0;
	c[2] = #40000 1'b1;
	c[2] = #40000 1'b0;
	c[2] = #20000 1'b1;
	c[2] = #40000 1'b0;
	c[2] = #20000 1'b1;
	c[2] = #40000 1'b0;
	c[2] = #20000 1'b1;
	c[2] = #80000 1'b0;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b0;
	c[1] = #20000 1'b1;
	c[1] = #80000 1'b0;
	c[1] = #400000 1'b1;
	c[1] = #20000 1'b0;
	c[1] = #60000 1'b1;
	c[1] = #40000 1'b0;
	c[1] = #40000 1'b1;
	c[1] = #20000 1'b0;
	c[1] = #20000 1'b1;
	c[1] = #20000 1'b0;
	c[1] = #40000 1'b1;
	c[1] = #20000 1'b0;
	c[1] = #20000 1'b1;
	c[1] = #80000 1'b0;
	c[1] = #20000 1'b1;
	c[1] = #40000 1'b0;
	c[1] = #20000 1'b1;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b0;
	c[0] = #80000 1'b1;
	c[0] = #20000 1'b0;
	c[0] = #380000 1'b1;
	c[0] = #20000 1'b0;
	c[0] = #20000 1'b1;
	c[0] = #20000 1'b0;
	c[0] = #60000 1'b1;
	c[0] = #60000 1'b0;
	c[0] = #20000 1'b1;
	c[0] = #60000 1'b0;
	c[0] = #120000 1'b1;
	c[0] = #20000 1'b0;
	c[0] = #40000 1'b1;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b1;
	d[5] = #20000 1'b0;
	d[5] = #60000 1'b1;
	d[5] = #20000 1'b0;
	d[5] = #380000 1'b1;
	d[5] = #20000 1'b0;
	d[5] = #40000 1'b1;
	d[5] = #40000 1'b0;
	d[5] = #80000 1'b1;
	d[5] = #40000 1'b0;
	d[5] = #40000 1'b1;
	d[5] = #20000 1'b0;
	d[5] = #20000 1'b1;
	d[5] = #20000 1'b0;
	d[5] = #40000 1'b1;
	d[5] = #100000 1'b0;
	d[5] = #40000 1'b1;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
	d[4] = #80000 1'b1;
	d[4] = #20000 1'b0;
	d[4] = #380000 1'b1;
	d[4] = #20000 1'b0;
	d[4] = #20000 1'b1;
	d[4] = #60000 1'b0;
	d[4] = #80000 1'b1;
	d[4] = #20000 1'b0;
	d[4] = #80000 1'b1;
	d[4] = #40000 1'b0;
	d[4] = #20000 1'b1;
	d[4] = #40000 1'b0;
	d[4] = #40000 1'b1;
	d[4] = #80000 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b1;
	d[3] = #40000 1'b0;
	d[3] = #440000 1'b1;
	d[3] = #20000 1'b0;
	d[3] = #40000 1'b1;
	d[3] = #20000 1'b0;
	d[3] = #20000 1'b1;
	d[3] = #20000 1'b0;
	d[3] = #80000 1'b1;
	d[3] = #40000 1'b0;
	d[3] = #40000 1'b1;
	d[3] = #40000 1'b0;
	d[3] = #40000 1'b1;
	d[3] = #20000 1'b0;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b0;
	d[2] = #20000 1'b1;
	d[2] = #40000 1'b0;
	d[2] = #20000 1'b1;
	d[2] = #20000 1'b0;
	d[2] = #400000 1'b1;
	d[2] = #20000 1'b0;
	d[2] = #120000 1'b1;
	d[2] = #40000 1'b0;
	d[2] = #20000 1'b1;
	d[2] = #20000 1'b0;
	d[2] = #60000 1'b1;
	d[2] = #60000 1'b0;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
	d[1] = #480000 1'b1;
	d[1] = #40000 1'b0;
	d[1] = #40000 1'b1;
	d[1] = #180000 1'b0;
	d[1] = #40000 1'b1;
	d[1] = #20000 1'b0;
	d[1] = #20000 1'b1;
	d[1] = #20000 1'b0;
	d[1] = #20000 1'b1;
	d[1] = #20000 1'b0;
	d[1] = #40000 1'b1;
	d[1] = #20000 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
	d[0] = #20000 1'b1;
	d[0] = #80000 1'b0;
	d[0] = #420000 1'b1;
	d[0] = #20000 1'b0;
	d[0] = #20000 1'b1;
	d[0] = #120000 1'b0;
	d[0] = #20000 1'b1;
	d[0] = #20000 1'b0;
	d[0] = #60000 1'b1;
	d[0] = #40000 1'b0;
	d[0] = #40000 1'b1;
	d[0] = #20000 1'b0;
	d[0] = #80000 1'b1;
end 
endmodule

