// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/24/2024 21:51:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab3_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab3_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg sel;
// wires                                               
wire [3:0] res;

// assign statements (if any)                          
lab3_3 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.res(res),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #400000 1'b1;
	a[3] = #400000 1'b0;
end 
// a[ 2 ]
initial
begin
	repeat(2)
	begin
		a[2] = 1'b0;
		a[2] = #200000 1'b1;
		# 200000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #100000 1'b1;
	#100000;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
	b[3] = #800000 1'b1;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #400000 1'b1;
	b[2] = #400000 1'b0;
end 
// b[ 1 ]
initial
begin
	repeat(2)
	begin
		b[1] = 1'b0;
		b[1] = #200000 1'b1;
		# 200000;
	end
	b[1] = 1'b0;
end 
// b[ 0 ]
always
begin
	b[0] = 1'b0;
	b[0] = #100000 1'b1;
	#100000;
end 

// sel
always
begin
	sel = 1'b0;
	sel = #50000 1'b1;
	#50000;
end 
endmodule

