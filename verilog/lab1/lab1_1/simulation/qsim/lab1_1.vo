// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"

// DATE "09/11/2024 00:44:50"

// 
// Device: Altera EP4CE6E22C8 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lab1 (
	sw0,
	sw1,
	sw2,
	led0,
	led1,
	led2,
	led3,
	led4,
	led5,
	led6,
	led7,
	led8,
	led9);
input 	sw0;
input 	sw1;
input 	sw2;
output 	led0;
output 	led1;
output 	led2;
output 	led3;
output 	led4;
output 	led5;
output 	led6;
output 	led7;
output 	led8;
output 	led9;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \led0~output_o ;
wire \led1~output_o ;
wire \led2~output_o ;
wire \led3~output_o ;
wire \led4~output_o ;
wire \led5~output_o ;
wire \led6~output_o ;
wire \led7~output_o ;
wire \led8~output_o ;
wire \led9~output_o ;
wire \sw2~input_o ;
wire \sw0~input_o ;
wire \sw1~input_o ;
wire \led1~0_combout ;
wire \temp~combout ;


cycloneive_io_obuf \led0~output (
	.i(vcc),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led0~output_o ),
	.obar());
// synopsys translate_off
defparam \led0~output .bus_hold = "false";
defparam \led0~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led1~output (
	.i(\led1~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led1~output_o ),
	.obar());
// synopsys translate_off
defparam \led1~output .bus_hold = "false";
defparam \led1~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led2~output (
	.i(!\temp~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led2~output_o ),
	.obar());
// synopsys translate_off
defparam \led2~output .bus_hold = "false";
defparam \led2~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led3~output (
	.i(vcc),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led3~output_o ),
	.obar());
// synopsys translate_off
defparam \led3~output .bus_hold = "false";
defparam \led3~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led4~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led4~output_o ),
	.obar());
// synopsys translate_off
defparam \led4~output .bus_hold = "false";
defparam \led4~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led5~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led5~output_o ),
	.obar());
// synopsys translate_off
defparam \led5~output .bus_hold = "false";
defparam \led5~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led6~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led6~output_o ),
	.obar());
// synopsys translate_off
defparam \led6~output .bus_hold = "false";
defparam \led6~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led7~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led7~output_o ),
	.obar());
// synopsys translate_off
defparam \led7~output .bus_hold = "false";
defparam \led7~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led8~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led8~output_o ),
	.obar());
// synopsys translate_off
defparam \led8~output .bus_hold = "false";
defparam \led8~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \led9~output (
	.i(gnd),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\led9~output_o ),
	.obar());
// synopsys translate_off
defparam \led9~output .bus_hold = "false";
defparam \led9~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \sw2~input (
	.i(sw2),
	.ibar(gnd),
	.o(\sw2~input_o ));
// synopsys translate_off
defparam \sw2~input .bus_hold = "false";
defparam \sw2~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \sw0~input (
	.i(sw0),
	.ibar(gnd),
	.o(\sw0~input_o ));
// synopsys translate_off
defparam \sw0~input .bus_hold = "false";
defparam \sw0~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \sw1~input (
	.i(sw1),
	.ibar(gnd),
	.o(\sw1~input_o ));
// synopsys translate_off
defparam \sw1~input .bus_hold = "false";
defparam \sw1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \led1~0 (
// Equation(s):
// \led1~0_combout  = (\sw2~input_o  & ((\sw0~input_o ) # (\sw1~input_o )))

	.dataa(\sw2~input_o ),
	.datab(\sw0~input_o ),
	.datac(\sw1~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\led1~0_combout ),
	.cout());
// synopsys translate_off
defparam \led1~0 .lut_mask = 16'hA8A8;
defparam \led1~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb temp(
// Equation(s):
// \temp~combout  = (\sw0~input_o ) # (\sw1~input_o )

	.dataa(\sw0~input_o ),
	.datab(\sw1~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\temp~combout ),
	.cout());
// synopsys translate_off
defparam temp.lut_mask = 16'hEEEE;
defparam temp.sum_lutc_input = "datac";
// synopsys translate_on

assign led0 = \led0~output_o ;

assign led1 = \led1~output_o ;

assign led2 = \led2~output_o ;

assign led3 = \led3~output_o ;

assign led4 = \led4~output_o ;

assign led5 = \led5~output_o ;

assign led6 = \led6~output_o ;

assign led7 = \led7~output_o ;

assign led8 = \led8~output_o ;

assign led9 = \led9~output_o ;

endmodule
